===============linux基本操作================

1.man手册(系统使用手册)
	man man	:	查看man手册
		man 1	:	用户命令
		man	2 	:	系统调用函数
		man 3	:	c库函数
		man 7	:	杂项，包括宏包和规范

	date	:	显示当前时间
		+%Y%m%d 	:	显示年/月/日
	history	:	当前用户历史命令
	cal		:	显示当月日历
	head	:	显示文件开头若干行
	tail	:	显示文件结尾若干行
	cat		:	显示文件全部内容
	more	：	按屏显示文件，enter以行显示，空格以页为单位显示
	less	:	more功能全部通用，且能通过pgUp和pgDn控制翻页,q键退出
	alias	:	为命令赋别名
	clear	:	清屏操作	快捷键 ctrl + l
	字体调节:	放大ctrl + shift + =号	缩小ctrl + -号
	关机命令:	shutdown -h now
				poweroff
				init 0
	退出当前终端	:	exit	快捷键	Ctrl + d
	打开新终端	:	ctrl + shift + n	ctrl + alt + t
	以标签形式打开	:	ctrl + shift + t

		网络连接方式 桥接/NAT	
		虚拟机


================文件管理================

linux系统下一切皆文件（包括目录）
一.
文件系统从根目录( / )开始
	命令行显示:
		username@hostname:path$
	cd	:	改变当前路径
			cd		只有cd，回用户家目录
			cd -	返回上一次路径变化前未知
	pwd	:	打印当前路径

bin		:	二进制文件
boot	:	系统启动配置文件
dev		:	设备
etc		:	配置文件
home	:	普通用户家目录，每一个用户都有自己的家目录
lib		:	库函数
mnt		:	手动挂载目录
media	:	自动挂载路径
cdroom	:	光驱
root	:	root用户的家目录
sbin	:	root用户的二进制文件
usr		:	系统资源文件(相当于programfiles)


用户分类:
	root用户	普通用户

二 路径
分为 相对路径 和 绝对路径

相对路径
	相对于当前路径所在的路径

绝对路径
	相对于根目录的路径

三、文件类型
d: 	directory	目录文件
c: 	charator	字符设备文件
b: 	block		块设备文件
-:  regular		普通文件
l:  link		符号链接文件
s: 	socket		套接字文件
p: 	pipe		管道文件

================文件操作命令=================

ls	遍历当前目录
	-a	查看所有文件(all)
		以.开头的文件为隐藏文件
	-l	以长条形式显示文件信息
		文件类型文件权限 硬连接数 username groupname 大小 日期 时间 文件名

		-------------------------
		文件权限:
		例如
		rw- 	rw- 	r--
		通常以8进制表示文件权限，如上面的可以表示为
		6		6		4
		owner 	group	other
		r	read	可读
		w	write	可写
		x			可执行
		改变文件权限
			chmod	八进制数	文件名
			或者改变某个用户的某些权限
			chmod	u(g/o)+r(w/x)	文件名
		-------------------------
		
		ls -l ====>ll
	-i 	显示文件的inode索引号
    -h	将文件的大小以人理解的方式显示(带单位)
    -d:	查看目录
touch	创建一个新文件

cp	拷贝
	cp /etc/passwd /home
	cp /etc/passwd /home/abc
	复制并修改文件名
复制目录
cp -r /etc/yum.repo.d .

diff	比较不同

mv	soucefile	destpath	剪切并粘贴

rm	删除	可以同时删除多个文件
	-r	递归的操作
	-f	强制操作(不报提示)

rmdir	删除一个空目录

mkdir	创建目录文件
	-p	创建有层次的目录

---------------------------
精通至少2种语言+至少1种脚本
c 	c++	java	
shell 	pathon

QT	界面设计	兼容性，可移植性高

网络知识想了解可以看
apue 的作者另作		unp -> unix网络编程		tcp/ip详解
---------------------------

文件重定向(0< 1> 2>)

	可以区分开输出和报错

	2>	覆盖写入
	2>>	追加写入

管道	|

wc	统计
	-l	统计行数
	-w	统计字段
	-c	统计字符数
diff	比较两个文件的不同，将不同显示在标准输出

================文件的压缩和打包================

压缩算法不一样，文件压缩后大小也不一定相同

常用:
tar	打包并压缩
	-c:创建包
	-v:显示过程
	-f:后跟包名
	-x:解包
	-r:向现有包中追加文件
	-t:显示包中包含的文件
	-z:压缩成gz格式
	-j: 压缩成bz2格式
	-C:指定解压位置
	
	#tar -cvf bao.tar file1 file2 dir1 dir2...
		将 file1 file2 dir1 dir2 打包进bao.tar
	#tar -tvf bao.tar
		显示包内所有文件的详细信息
	#tar -rvf bao.tar file3
		将file3追加进包bao.tar内
	#tar -cjvf bao.tar.bz2 file1 file2 dir1 dir2...
		将file1 file2 dir1 dir2...打包并压缩成bz2格式的文件
	#tar -czvf bao.tar.gz file1 file2 dir1 dir2...
		将file1 file2 dir1 dir2...打包并压缩成gz格式的文件
	#tar -xzvf bao.tar.gz
		将bao.tar.gz解压并解包
	
================链接文件================

硬链接
	ln 源文件 链接文件名
	ln -l 源文件 链接文件名
	删除源文件不影响链接文件内容，起到备份的作用

****注意****
<1>硬链接文件与原文件共用同一个inode号,只是目录项中多了一条记录
<2>硬链接文件不能跨平台
<3>不能给目录创建硬链接

符号链接
	ln -s srcname linkname
	cp -s srcname linkname

****注意****
<1>符号链接文件有自己的inode号,是一个新文件,存储的是原文件的路径，文件大小是原文件名的字符数
<2>符号链接文件使可以跨平台(类似于快捷方式)


1.如何用vim编辑文件
vim filename
2.
一般模式
插入模式
命令行模式
3.模式之间的切换
一般模式进入插入模式:
i:在光标所在位置的前一个字符插入
I:在光标所在行的行首插入
a:在光标所在位置的后一个字符插入
A:在光标所在行的行末插入
o:光标所在行的下一行插入
O:光标所在行的上一行插入
s:删除光标所在字符并插入
S:删除光标所在行并插入

复制	yy
剪切	dd
粘贴	p
撤销	u
首行	gg
末行	G
行首	0
行尾	$
查找	/查找内容	n/N上一个或下一个

保存		:w
退出		:q
强制执行	!
替换		:% s/old/new 替换第1个(结尾加上/g替换全文)
另存为		:w (空格)

块操作:
1）	ctrl+v	进入可视化块模式
2)  方向键选择要操作的区域
3)  如果在所选区域前插入字符串
		shift+i输入串
4) 	连续点击Esc两次

将以上设置写进配置文件
vim ~/.vimrc 值影响当前用户
sudo vim /etc/vimrc 影响全部用户(不推荐)


打开多个文件

vim -o 文件名 文件名
vim -O 文件名 文件名	ctrl + ww
vim -p 文件名 文件名	ctrl + PgDn

变量快速补齐
	ctrl + p

grep 检索关键字

用户
useradd
userdel

================进程管理================

ps:		静态显示当前进程
	ps axf	查看正在运行的进程，含父子关系
	ps ax -L	可以查看线程标识
	ps axu
	ps axj	
	ps axm

-a	显示除去会话leader和与终端有关的所有进程
-d	显示除去会话leader的所有进程
-p	pid


top:	动态显示当前进程所占数据和资源情况
		q键退出

kill:	杀死进程
	kill -l 	显示当前所有信号
	kill -2 pid
	   给进程号pid的进程发送2号信号

ftp服务器
	用于传输数据
	访问:	lftp ip地址
	退出:	bye 	quit
	获取普通文件	get 
	获取目录文件	mirror


================C语言部分================
================C语言部分================
================C语言部分================

勤动手	多做题

可以看谭浩强的c语言	书+习题册

1.基本知识
2.数据类型、运算符、表达式
3.输入输出部分
4.流程控制
5.数组
6.指针
7.函数
8.构造函数
9.
10.


算法:解决问题的方法和思路

函数结束 return 0;
进程终止 exit(0);	头文件stdlib.h

ubuntu使用的是GNU C	不是标准的c语言
编译器处理过程:	预处理 编译 汇编 链接
gcc hello.c 	得到a.out
或者gcc hello.c -o hello	得到-o后面的名字

echo $? 	可以查看之前程序的父进程得到的返回值


————————————————数据类型————————————————

----基本类型----
> 整型
int 	long 	unsigned int 	long long int

> 浮点型
浮点数无法和一个数精确比较
判断浮点数是否为零
	if(fabs(f - 0) <= e-6)

> 字符类型
char 8位	有符号、无符号
ascii码 48-57为 0 - 9
		65-90为 A - Z
		97-122为a - z
		
> 数据类型转换
隐式转换
	f0 = f/i 	按照存储空间最大的类型转换
强制类型转换
	i = (int)f 	f的改变是临时的，实际并不会改变f的值

----构造类型----

----常量与变量----
> 常量
不能变化

> 标识常量
#define PI 3.14;	标识常量
宏定义在预处理阶段完成
不检查语法	只能实现原位置替换

****注意****
定义宏时记得宏体加括号

> 变量

定义:[存储类型] 数据类型 变量名

-存储类型-
每个变量都有自己的生命周期和生存空间(作用域)

auto 	自动存放 默认存放的类型 
		存放在栈区内，编译器自动生成自动释放

register:	寄存器	直接存储在cpu中，不需要反复读取
			建议性关键字 并不一定存放在寄存器内

static 	:	1-静态变量
			  定义的变量的值具有继承性
			2-可以限制全局变量作用范围在本.c文件内

extern	:	声明型 为变量扩展作用范围,代表此变量或函数在其他文件中定义

-作用域-
全局变量	生命周期和作用域:从变量定义的位置到函数结束
局部变量	被{}围起来的空间内

-数据类型-
基本类型，构造类型

-变量名-
由字母、数字、下划线组成，不能以数字开头


————————————————运算符————————————————

----算术运算符----
+ - * / % ++ --
5.0/2 = 2.5
5.0%2 	(F)%取模运算符左右皆为整数
i++  ++i   -> i = i+1;
i--  --i   -> i = i-1;
符号在前,先进行运算,再使用变量值
变量在前,先使用变量值,再进行运算

int i = 1,j = 5;
int m;
m = i++;    -> m = i;   i++;   ->  m = 1;    i = 2;
m = --j;    -> j--;  m = j;     -> m = 4;   j = 4;

m = ++i - j--;   -> ++i; m=i-j; j--;   -> i = 2; m = -3; j=4;

----关系运算符----
== 	> 	>= 	<	<= 	!=
关系运算符返回值是真(非0))/假(0)

----逻辑运算符----
返回值为真/假
!	非 
&& 	与
||	或

&& || :短路特性
 exp1  &&   exp2   
 0          0          0
 0          1          0
 1          0          0
 1          1          1

exp1  ||   exp2
 0          0          0
 0          1          1
 1          0          1
 1          1          1

 int i = 1,j = 5;
 int m;
 i > 3 && j < 8   ->  0
 m = i < 5 && j++   -> 1

 短路特性:
 int a = 1,b = 2,c = 3,d = 4;
 int m = 1,n = 1;
 (m = a > b) && (n = c > d);
 printf("m = %d,n = %d\n",m,n);

----赋值运算及其扩展----
 =  += -= *= /= ..

 a += b ; ->  a = a + b;
 a *= b ; ->  a = a * b;

 int a = 3;
 a *= 5+2; ->  a = a * (5+2) - >  a = 21;


 int a = 6;
 a += a -= a *= a /= 6;   ->  a = 0;

----条件运算符---- 
 语句1  ?  语句2  :  语句3

 int i = 1,j = 5;
 int m;

 m = i > j ? i : j;

if(i > j)
	m = i;
else
	m = j;

----逗号运算符----
for(i = 0,j = 0; i <= 10; j--,i++)

----位运算----
<< -> *2    >> -> /2:
int i = 4;
i << 1;      4 -> 0B100 -> 0B1000 -> 8
i >> 1;      4 -> 0B100 -> 0B10 -> 2
i >> 2;   = 1;

	11000101
  ~	========
	00111010

	11001100
  & 10100100
	========
	10000100

	11001100
  | 10100100
	========
	11101100

^同为0,不同为1
	11001100
  ^ 10100100
	========
	01101000


----输入输出----
scanf()		
返回值是成功匹配的对象个数

printf()
返回值是成功打印的字符数

getchar()
返回值:	成功返回输入的字符转换为int的值，失败返回EOF(-1)

putchar()
返回值与getchar()相同



————————————————控制语句————————————————

----顺序----
从上到下依次执行


----选择----
if()
	语句1；
else
	语句2；

switch()
{
	case const-expr:
}



----循环----
初始化条件，循环条件，步长变化，循环体
> while
while(循环条件)
{
	循环体；
}
while(1);	死循环

> do..while
do
{
	循环体；
}while(循环条件);
至少执行一次

> for
for(初始化条件;循环条件;步长变化)
{
	循环体；
}
for(;;);	死循环

> goto
无条件跳转(不能跨函数)
需要加一个循环标志


——————————————————数组(array)——————————————————

若干个 类型相同 的变量在内存中 连续 存放

> 定义:
[存储类型] 数据类型 数组名 [ 数组成员个数 ];
static int a[3];

> 赋值与初始化
可以在定义的时候初始化	int a[3] = {1,34,8};

如果部分成员初始化，其他成员自动初始化为0

如果未在初始化时赋值，只能给数组中的成员逐个赋值
int a[N];
for(i = 0; i < N; i++)
	scanf("%d", &a[i]);

数组成员在定义时可以省去成员个数，但这种方式必须初始化会根据后面数据个数赋值
int a[] = {1,2,3}

数组的存储特点是顺序存放
int a[3]	地址是连续的3个int的空间

数组名是表示地址的常量，是数组起始位置，数组第一个成员的地址
a[N] = 1;	(X)错的方法,数组越界

****数组越界****
数组越界非常危险，是编译器无法帮我们查看到的问题，只能由程序员根据经验排查
数组越界是因为指针的移动是合法的



> 数组和指针
a[i]   ->  *(a+i)
&a[i]  ->  a+i


> 冒泡法排序(相邻两个数两两相比较,大的交换到后面)
(9个数)	3	7	2	4	9	6	8	1	5
1)		3	2	4	7	6	8	1	6  (9)
2)		2	3	4	6	7	1	5  (8)
3)		2	3	4	6	1	5  (7)
4)		2	3	4	1	5  (6)
5)		2	3	1	4  (5)
6)		2	1	3  (4)
7)		1	2  (3)
8)		1  (2)
a[9] = {3,7,2,4,9,6,8,1,5};
for(i = 0; i < 8; i++)
{
    for(j = 0; j < 8-i; j++)
    {
        if(a[j] > a[j+1])
        {
            tmp = a[j+1];
            a[j+1] = a[j];
            a[j] = tmp;
        }
    }
}

> 选择法排序(每轮拿一个数作为基数,其他数与之比较,记下最小的数的下标,将最小的数放在最前面)
(9个数)	3	7	2	4	9	6	8	1	5
1)	   (1)	7	2	4	9	6	8	3	5
2)	   	   (2)	7	4	9	6	8	3	5
3)	   		   (3)	4	9	6	8	7	5
4)	   			   (4)	9	6	8	7	5
5)	   				   (5)	6	8	7	9
6)	   				   	   (6)	8	7	9
7)	   				   		   (7)	8	9
8)	   				   			   (8)	9


----二维数组----

二维数组的数组名仍然是表示数组开始的地址的常量

二维数组在内存中按行存储,线性存储

二维数组初始化时行下标可以省略,列下表不能省略;

a[i] -> *(a + i)

int a[3] = {3,4,5};
int[3] a = {3,4,5};

a[i] -> *(a + i) -> *(i + a) -> i[a]	这种写法是正确的

二维数组a+1 -> a[1] -> 数组第"1"行首成员地址

a[3][4] -> 	*(*(a+3)+4)
int a[3][4] -> 	int[4] a[3]
a+1		->	a[1] 是数组a第"1"行的首成员地址

> 字符数组
char a[3] = {'a', 'b', 'c'};
部分元素初始化时在其他数组成员自动初始化为0,即空字元

字符串常量本身有一个'\0'作为结束的标记

输入输出最好配套使用,否则易出现错误

scanf %s不能获取带有分隔符的字符串,gets()可以

man string	查看string族函数
	strlen	-	sizeof	
	不包含'\0'	
	strcpy	-	strncpy
				可以定义cpy范围,如果n范围内没有\0,不会附加\0,如果源字符数组成员不足n,后面的全部变为\0
	strcat	-	strncat
	strcmp	-	strncmp
				可以定义比较范围


————————————————指针————————————————
————————————————指针————————————————
————————————————指针————————————————

指针就是地址

指针变量:用来存放指针的变量(通常说的指针就是指针变量)
int * p;

直接访问:
	int i = 1;

间接访问:
	int i;
//	int * p;	|__		等价于
//	p = &i;		|  		int * p = &i;

*p	指针变量p所指向的的地址里存储的值

----二级指针----
int i = 1;
int * p = &i;
int **q = &p;	a pointer to a pointer to an integer.


> 空指针 野指针
野指针:指针未定义指向确定的变量,就已经开始使用指针指向的空间(并不一定报段错误)
int *p;		*p = 1;	(FALSE)

空指针:将指针指向0地址号NULL

空类型:任何类型的指针都可以赋值给空类型指针,空类型的指针也可以赋值给其他任意类型的指针
void *

> 指针的运算
指针可以做算术运算,条件运算

数组名是地址常量,不能做自增自减运算

> 二维数组与二级指针
int a[2][3];
int **q;
二维数组不等于二级指针

----数组指针----
[存储类型] 数据类型 (*指针名) [成员个数]
int (*p)[3]  	->		int[3]	*p (原理,并不识别)

char str[] = "1234567890";
char *p = "helloworld"
//T p = str;  p[3] = 'X';
//F str = p;    str是地址常量

//F strcpy(p,str);  p的指向是字符串常量
//T strcpy(str,p);

typed name = value;

----指针常量----
const	不能通过变量名改变变量值
const int i;		
int const i;		

int const *p;		常量指针
const int * p;

int * const p;		指针常量

const int *const p;	常量指针常量


————————————————函数————————————————
————————————————函数————————————————
————————————————函数————————————————
函数定义: <返回值的数据类型> <函数名> (<形参>)

实参:实际参数
形参:形式参数
GCC提供的一些宏:	__FUNCTION__	__LINE__

> 值传递
适合值的大小比较(不能改变值)

> 地址传递

----函数嵌套----
函数内部调用了其它函数

----递归函数----
函数内部调用函数本身

指针函数:
返回值是指针的函数

函数指针:
函数f();
type name = value;

int a[3]  -->  		int[3]	a;

int f(int);	-->		int(int) f;	
int(int) *p = f;	int (*p)(int) = f;


int (*p)(int);	指向整型函数的函数指针
int *p(int);	返回值是整型的指针函数
int *(*p)int;	指向(返回值是int*的指针函数的)函数指针->指向指针函数的函数指针
int *(*p)(int *);	指向指针函数的函数指针



string族函数
stpcpy	拷贝一个字符串(包括\0)返回一个指针,指向目标字符串的结尾\0
strcat		在一串字符\0处追加一串字符,并在最后加上\0	
strncat		追加n个字符,不会在最后追加\0
strchr		查找一个字符,返回指向该字符所在位置的指针
strcmp		比较两个字符串

c标准库函数
1	void *memchr(const void *str, int c, size_t n)
	在参数 str 所指向的字符串的前 n 个字节中搜索第一次出现字符c(一个无符号字符)的位置。
2	int memcmp(const void *dest, const void *src, size_t n)
	把 str1 和 str2 的前 n 个字节进行比较。
3	void *memcpy(void *dest, const void *src, size_t n)
	从 src 复制 n 个字符到 dest。
4	void *memmove(void *dest, const void *src, size_t n)
	另一个用于从 str2 复制 n 个字符到 str1 的函数。
5	void *memset(void *str, int c, size_t n)
	复制字符 c（一个无符号字符）到参数 str 所指向的字符串的前 n 个字符。
6	char *strcat(char *dest, const char *src)
	把 src 所指向的字符串追加到 dest 所指向的字符串的结尾。
7	char *strncat(char *dest, const char *src, size_t n)
	把 src 所指向的字符串追加到 dest 所指向的字符串的结尾，直到 n 字符长度为止。
8	char *strchr(const char *str, int c)
	在参数 str 所指向的字符串中搜索第一次出现字符 c（一个无符号字符）的位置。
9	int strcmp(const char *str1, const char *str2)
	把 str1 所指向的字符串和 str2 所指向的字符串进行比较。
10	int strncmp(const char *str1, const char *str2, size_t n)
	把 str1 和 str2 进行比较，最多比较前 n 个字节。
11	int strcoll(const char *str1, const char *str2)
	把 str1 和 str2 进行比较，结果取决于 LC_COLLATE 的位置设置。
12	char *strcpy(char *dest, const char *src)
	把 src 所指向的字符串复制到 dest。
13	char *strncpy(char *dest, const char *src, size_t n)
	把 src 所指向的字符串复制到 dest，最多复制 n 个字符。
14	size_t strcspn(const char *str1, const char *str2)
	检索字符串 str1 开头连续有几个字符都不含字符串 str2 中的字符。
15	char *strerror(int errnum)
	从内部数组中搜索错误号 errnum，并返回一个指向错误消息字符串的指针。
16	size_t strlen(const char *str)
	计算字符串 str 的长度，直到空结束字符，但不包括空结束字符。
17	char *strpbrk(const char *str1, const char *str2)
	检索字符串 str1 中第一个匹配字符串 str2 中字符的字符，不包含空结束字符。也就是说，依次检验字符串 str1 中的字符，当被检验字符在字符串 str2 中也包含时，则停止检验，并返回该字符位置。
18	char *strrchr(const char *str, int c)
	在参数 str 所指向的字符串中搜索最后一次出现字符 c（一个无符号字符）的位置。
19	size_t strspn(const char *str1, const char *str2)
	检索字符串 str1 中第一个不在字符串 str2 中出现的字符下标。
20	char *strstr(const char *haystack, const char *needle)
	在字符串 haystack 中查找第一次出现字符串 needle（不包含空结束字符）的位置。
21	char *strtok(char *str, const char *delim)
	分解字符串 str 为一组字符串，delim 为分隔符。
22	size_t strxfrm(char *dest, const char *src, size_t n)
	根据程序当前的区域选项中的 LC_COLLATE 来转换字符串 src 的前 n 个字符，并把它们放置在字符串 dest 中。



----------------结构体与共用体----------------
struct 结构体关键字

部分成员初始化 
struct node_st stu = {.f=123};

可以有无头结构体,但是必须在定义结构体时的时候定义变量;

结构体存在对齐方式:主要是因为编译器:

addr % sizeof() == 0;	就会把数据放进这块地址

结构体可以嵌套

memcpy()函数	存储空间拷贝

malloc()
动态内存分配

free()
释放一块内存,但还能用指针访问该空间(不合法),所以应该在后面加上p = NULL;

realloc	重新分配内存
返回一个指向重新分配的内存的指针,指定的空间大小可以小于原来的大小

calloc
作用与malloc相同,单位不同,内存空间被设置为零
void *calloc(int num, int size);
在内存中动态地分配 num 个长度为 size 的连续空间
并将每一个字节都初始化为 0。
结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。

union
根据的空间为占用内存最大的共用体成员的空间

位域		(面试题)
	每个成员占哪位

____例题____
struct 
{
	unsigned int a : 1;
	unsigned int b : 2;
	unsigned int c : 1;
}flags;

union 
{
	struct 
	{
		char a:1;
		char b:2;
		char c:1;
//      char x:3;
	}s;
	char d;
}u;
_____________
    u.d = 13;   //0000 1101
	u.s.a = -1  //     cbba a=1 b=10 c=1

补码
原码
反码

====typedef====
typedef	给一个已有的类型取别名
typedef 已有的类型 	别名;

struct student_st
{
	......
};

typedef struct student_st STU;
STU s1; -->  struct student_st s1;
STU *p; -->  struct student_st *p;

typedef struct student_st *STUP;
STUP p; -->  struct student_st *p; 

等价于
truct student_st
{
	.....
}STU,*STUP;

int A[3];     ->  int[3]  -> A

A a;  ->  int a[3];

typedef int ARR[2][3];
->  int[2][3]   ARR;
ARR  a,b,c; ->   int a[2][3],b[2][3],c[2][3];

int func(int); -->  int(int)   func;

typedef int FUNC(int);

FUNC func;  -> int func(int);

typedef int *FUNC(int *);           -> int*(int*)  FUNC

FUNC a;  -> int *a(int *);

*****TYPE NAME = VALUE;

typedef int *(*FUNC)(int *);
给指向指针函数的函数指针取别名为FUNC

FUNC  a,b;  -> int *(*a)(int *);   int *(*b)(int *);

----枚举----
enum
enum 枚举名
{
	标识符[=整型常数],
	标识符[=整型常数],
	...
	标识符[=整型常数]
}枚举变量;
如果枚举没有初始化, 即省掉"=整型常数"
则从第一个标识符开始, 顺次赋给标识符0, 1, 2, ...
但当枚举中的某个成员赋值后, 其后的成员按依次加1的规则确定其值。


ip a
ifconfig
查看IP地址

————————————————编译工具————————————————

> GCC
预处理 	gcc -E file.c > file.i
把#include包含进来的.h 文件插入到#include所在的位置
把源程序中使用到的用#define定义的宏用实际的字符串代替
-E选项要求gcc只进行预处理而不进行后面的三个阶段

编译	gcc -S file.i 		会默认产生file.s
检查代码的规范性、是否有语法错误等,以确定代码的实际要做的工作
在检查无误后，Gcc把代 翻译成汇编语言。
用户可以使用”-S”选项来进行查看，该选项只进行编译而不进行汇编，生成汇编代码

汇编	gcc -c file.s		产生file.o

链接	gcc	-o file.o		生成可执行文件

> make 工程管理器		====================重要,查看
makefile Makefile	优先级makefile更高

编译选项 	CFLAGS
OBJS		
$@			上面一行的目标文件
$^			上一句中所需要依赖的文件
%			匹配多个字符

> 版本管理器 cvs -> SVN -> Git		========学会一个(git)

> gdb调试工具
gcc file.c -g
gdb a.out		使用gdb工具
run 		-> 	r
breakpoint 	-> 	b
continue 	-> 	c
next 		-> 	n
info breakpoint	设置断点
print			打印某个函数值
display			设置需要查看的变量
step -> s		(进入函数)
quit(q) 		退出



> 条件编译
#ifndef NAME
#define NAME

int func(int a, int b);

#endif


=====================================正则表达式

















